<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Chow&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ouzhrm.github.io/"/>
  <updated>2018-04-18T07:41:26.652Z</updated>
  <id>https://ouzhrm.github.io/</id>
  
  <author>
    <name>Kevin Chow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《大型网站技术架构 核心原理与案例分析》读书总结</title>
    <link href="https://ouzhrm.github.io/2018/04/18/%E3%80%8A%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84-%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://ouzhrm.github.io/2018/04/18/《大型网站技术架构-核心原理与案例分析》读书总结/</id>
    <published>2018-04-18T02:21:51.000Z</published>
    <updated>2018-04-18T07:41:26.652Z</updated>
    
    <content type="html"><![CDATA[<h4 id="我为什么读这本书？"><a href="#我为什么读这本书？" class="headerlink" title="我为什么读这本书？"></a>我为什么读这本书？</h4><p>最近在研究分布式相关，在网上聊的热火朝天，都说这本书入门好。李智慧编写，电子工业出版社出版，豆瓣读书评分是<br>7.9,一共有1000多人参与评论。我大概花了一个多星期的零碎时间，通读了这本书，大概读到后面的后辈对晚辈的悉心嘱<br>咐的时候，我就在豆瓣读书奉献了这本书的书评，给了三星。并作了一些评论。毫无疑问，这本书真的是很适合入门，网<br>上的兄弟们没骗我，它会在大型网站架构上给你一些很全面的认识以及自己的一些经验之谈。但咋们做技术的，往往注重<br>实用性，关注点在能不能用，怎么用，用的时候注意什么，用的好不好等问题，但在这本书并没有深入。而最后，我想总<br>结的是，这本书更像一本兵书，想发力却又用不上来的那种感觉，又像师父领进门，修行看个人的感觉。如果说非要给这<br>本书来个标签，那可能是，有点失灵，但方向还基本正确的指南针，因为里面多少掺杂一些水分，无关紧要的，能一句话<br>说完，它非要说上1000来字，带点装*，自嗨的那种感觉。    </p><h4 id="这本书带给我的收获"><a href="#这本书带给我的收获" class="headerlink" title="这本书带给我的收获"></a>这本书带给我的收获</h4><p>一般后台的分三层：应用层，服务层，数据层。应用层一般是页面及控制器。服务层是一些可调用的接口，可以理解成<br>service层，而数据库层，也就是操作数据库的，可以理解成dao层。但这仅仅指的是java层面上的理解。</p><p>先说应用层，也就是页面相关的。<br>流量入口，我们一般用nginx进行反向代理，负载均衡。将请求按轮询的方式或者hash方式分发到具体的服务器或者网关。<br>一些热点的静态页面（比如说主页）可以放到nginx缓存或者CDN服务器。而CDN、反向代理服务器的原理都是缓存。当然<br>，如果集群中的某一台服务器宕机了，要实现失效转移，将请求转发到其他正常运行的服务器中。<br>1、页面优化<br>为减少http请求，我们要实现一个静态资源，合并css,js,以及请求数据量大的图片。其次，要通过设置请求头的方式实现<br>浏览器缓存，304重定向，防止图片，js的文件的再次加载。其次可以启用压缩，服务器将文件压缩，浏览器解压缩。减少<br>传输的数据量。其次css放在上面，js放在下面。因为加载页面是从上往下加载的。<br>2、负载均衡<br>有几种方式，反向代理负载均衡，IP负载均衡，数据链路层负载均衡等。这些之后可以去了解一下，这几种都是不同的。<br>这本书也描述的不是特别清楚。然后以及负载均衡的算法，现在业内大部分是通过一致性hash算法来实现请求到底去选择<br>哪一台服务器。</p><p>然后说说服务层<br>当服务层的关系很复杂的时候，我们要对其进行解耦，解耦的方式有以下那么几种：<br>分布式服务：也就是rpc,远程方法调用，国内的Dubbo或者FaceBook通过Thrift来自主研发的框架。原理简单：网络通信+<br>编解码+服务端+客户端。<br>消息队列：消息队列是类似于生产者-消费者模式的。一头生产消息，另一头消费消息，中间来个管理消息与推送消息的。<br>也常常叫做消息中间件，jms。如：activemq，kafka等。在高并发支付场景可以使用。但注意幂等性，消息重发等问题。<br>独立部署web应用：当某一个服务与其他服务关联不大的时候，可以采用单独拿出来，独立部署。</p><p>最后是数据层<br>关系型数据库往往会设计成读写分离（master写，一个或多个slave读）的模式。如mysql本身有主从热备的功能，也就是<br>数据库之间数据同步。先说下概念，热备份是主从复制，而冷备份定期存档。其次还有垂直水平分库分表的方式，按业务<br>模块分，按列，按时间等分出多个数据库或表。性能上，人为能改变的有sql优化、索引设置等。<br>然后是nosql相关的，nosql种类很多，如key-value形式，可用于存session，保证session一致性的redis,文档型非关系型<br>数据库mongoDB,此外还有mamcached等。然后介绍几个概念，<br>缓存预热：将数据提前存到非关系型数据库如redis中，防止项目重新部署之后，关系型数据库如mysql访问量过大而宕机。<br>缓存穿透：是指大量并发访问redis中一个不存在的数据，导致请求都往mysql上串，最终mysql访问量过大而宕机，解决的<br>方式可以是设置将redis不存在的数据立即返回null。</p><h4 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h4><p>自动化是我们的理想形态，如：自动化发布、自动化代码管理、自动化测试（安全、性能、功能），自动化监控和报警（心<br>跳检测、通知），自动化失效转移，超时转移和失效恢复、自动化降级、自动化分配资源等。</p><h4 id="大型网站要实现以下几种性质"><a href="#大型网站要实现以下几种性质" class="headerlink" title="大型网站要实现以下几种性质"></a>大型网站要实现以下几种性质</h4><p>可用性：一年内99.99%的时间里，服务器都能正常的运行及可提供功能访问。<br>伸缩性：线上增减服务器数量时对其它服务器的影响。<br>扩展性：增减功能对其他功能的影响。<br>安全性：保证网站的安全。</p><h4 id="CAP原理"><a href="#CAP原理" class="headerlink" title="CAP原理"></a>CAP原理</h4><p>C：数据一致性，保证请求在某一具体功能点上都能访问到相同或者说正确的数据。<br>A：数据可用性：任何时候请求的数据都能进行读写访问。<br>P：系统跨网络线性伸缩。</p><h4 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h4><p>每天只发布部分服务器，分多天发布。</p><h4 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h4><p>集群服务器之后，请求过来后，访问那一台服务器是具有不确定性的。</p><h5 id="秒杀系统的架构和设计"><a href="#秒杀系统的架构和设计" class="headerlink" title="秒杀系统的架构和设计"></a>秒杀系统的架构和设计</h5><p>1、秒杀系统独立部署，与网站其他功能尽量没有关联，秒杀商品页面静态化，用户请求不需要经过应用服务器进行跳转或者<br>逻辑处理，秒杀页面租借秒杀活动网络带宽，将秒杀商品页面缓存到CDN中。<br>2、部署定时任务服务器，动态生成随机下单页面的URL，推送到javascript服务器中，到点后，静态页面刷新，购买按钮点亮。<br>3、设置全局计数器服务器，每次下单前都要取缓存中的数字进行比对，如果大于缓存中的数字，则直接返回活动结束页面，<br>否则提交到订单处理子系统。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>服务器配置实时更新之后的分布式配置，如用zookeeper共享配置。<br>分布式环境下实现并发访问协同的分布式锁。<br>分布式批量操作等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;我为什么读这本书？&quot;&gt;&lt;a href=&quot;#我为什么读这本书？&quot; class=&quot;headerlink&quot; title=&quot;我为什么读这本书？&quot;&gt;&lt;/a&gt;我为什么读这本书？&lt;/h4&gt;&lt;p&gt;最近在研究分布式相关，在网上聊的热火朝天，都说这本书入门好。李智慧编写，电子工业出版
      
    
    </summary>
    
      <category term="读书" scheme="https://ouzhrm.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="分布式" scheme="https://ouzhrm.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://ouzhrm.github.io/2018/04/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://ouzhrm.github.io/2018/04/12/我的第一篇博客/</id>
    <published>2018-04-12T06:39:32.000Z</published>
    <updated>2018-04-18T01:53:02.750Z</updated>
    
    <content type="html"><![CDATA[<p>接触博客已经3、4年了，但是一直没有搭建过自己的一个独立的博客，曾经在github上，csdn上写过，<br>最高的那篇文章浏览量也已经过万，那是大二的时候了。今天浏览github的时候无意之中看见了搭建<br>博客的教程，心里突然想到的是，一味的索取他人的知识，没有奉献过自己的知识，顿时感觉到是不是<br>有点自私了？于是乎，经过三天的摸索，终于搭建了一个自己的小博客，写这篇博客的目的是，希望勉<br>励自己，不断前行，尽可能的为互联网事业奉献自己的一份微薄之力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接触博客已经3、4年了，但是一直没有搭建过自己的一个独立的博客，曾经在github上，csdn上写过，&lt;br&gt;最高的那篇文章浏览量也已经过万，那是大二的时候了。今天浏览github的时候无意之中看见了搭建&lt;br&gt;博客的教程，心里突然想到的是，一味的索取他人的知识，没有奉献过
      
    
    </summary>
    
      <category term="随笔" scheme="https://ouzhrm.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://ouzhrm.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
